"""
#!/usr/bin/env python
# -*- coding: utf-8 -*-
@created by: Shivan
@created on: 7/6/2022 10:25 AM  
"""
from OD_function import plot_maps, objScale, reset_maps, plot_SF

#%%
Engine = 0

if Engine == 0:
    x = [-0.7101294159969878, 0.04038538046032969, -0.24383268305473293, -0.0010426711679641266, -0.18435766466746334,
         -0.030107471129562573, 0.036649500518207034, -0.04092060343311454, -0.1426813257098275, 0.06637357354888414,
         0.017819268496999552, 0.03092519290638469, -0.8971470821454369, -0.00535054833666423, -0.9421331533952098,
         0.04718946676711355, 0.5027904332893196, 0.11145379822448692, -0.09683416509479542, 0.068464710470305,
         0.17123111659874796, -0.02613406495873413]

    x  = [-0.4025822601276563, -0.005802896649906808, -0.11088824102346234, -0.048448339930406786, 0.02042115038239753,
          -0.027475327275423053, 0.072836560838756, 0.08900930488402736, -0.1652761547792363, -0.06909817453191151,
          -0.030974641972720762, 0.046848355565479664, -0.6685051690636411, 0.006384521091670448, -0.6981013933992258,
          0.0987650018395357, 0.4378956504344078, 0.20061096534330752, 0.12074029813700804, 0.0752004423730913,
          0.23098143470838245, -0.0769209140767761]



else:
    x = [-0.008822837736952471, 0.0058793939055768575, -0.3251738119058113, 0.07207169412899013, 0.1812968645178084,
         -0.09634537119025831, 0.0325169552257516, -0.0029467529297922293, 0.0410914754190046, 0.079970026969511,
         0.1741324433406459, -0.08063457349264132, 0.8515210551791896, -0.02480383529870535, 0.9645802455374273,
         -0.07911671556436961, -0.08695572627798298, 0.09037426439191576, 0.03953507174789811, -0.0534066728977741,
         0.2395100015597051, 0.08387581316708265]

    # new booster maps
    x = [-0.019668259406582123, 0.015620994012480094, -0.35975547735263036, -0.0643430369955693, 0.058849621096941584,
         0.06549124271951658, 0.05732135345603906, 0.057987627262460255, -0.03837555034423168, 0.011506984525286913,
         0.13993592977559635, 0.03990621418948715, -0.07782061534773543, -0.0044644393991221, 0.9980586882263216,
         0.029513119130315582, -0.3114282053693205, 0.017122948274439276, -0.2101266035042585, 0.06158061120906975,
         0.21818071855633153, -0.08608593558163541]

    x =  [-0.04928205772860528, 0.06851047680413484, 0.301349334564295, 0.06209473994298534, 0.19944591628460337,
          -0.12174099442832763, 0.022346576821504094, -0.008871426020607188, 0.05564105265514252, -0.09237435308896307,
          0.19231140885278297, -0.0348636735039531, 0.6614691069744412, 0.024574346673492523, 0.9991717196292911,
          -0.04808854810132434, -0.019650060476977524, 0.04976163586703295, 0.04351558024757113, 0.016403339148221476,
          0.23825753772416336, -0.03088591520527134]



reset_maps()
objScale(x)

plot_maps('C', "1_LPC_core")
plot_maps('C', "2_LPC_bypass")
plot_maps('C', "3_HPC")
plot_maps('T', "4_HPT")
plot_maps('T', "5_LPT")
#
# %% plot the scaling factors

# plot_SF(1, 'C',  "1_LPC_core", x[:6])
# plot_SF(1, 'C', "2_LPC_bypass", x[6: 12])
# plot_SF(2, 'C', "3_HPC", x[12: 18])
# plot_SF(2, 'T', "4_HPT", x[18:20])
# plot_SF(1, 'T', "5_LPT", x[20:22])
#
# #%%
# import matplotlib.pyplot as plt
# import numpy as np
#
# def W(M, A, R, g):
#
#     return (A * M * np.sqrt(g/R))/(1 + 0.5 * (g-1) * M**2)**((g + 1)/(2*(g - 1)))
#
# M = np.arange(0.2, 1.8, 0.005)
#
# plt.plot(M, W(M, 0.13, 287, 1.4))
# plt.show()

